# BENTHOS LINT DISABLE
# This file was auto generated by benthos_config_gen.
http:
  address: ${HTTP_ADDRESS:0.0.0.0:4195}
  debug_endpoints: ${HTTP_DEBUG_ENDPOINTS:false}
  enabled: ${HTTP_ENABLED:true}
  read_timeout: ${HTTP_READ_TIMEOUT:5s}
  root_path: ${HTTP_ROOT_PATH:/benthos}
input:
  broker:
    copies: ${INPUTS:1}
    inputs:
      - amqp:
          consumer_tag: ${INPUT_AMQP_CONSUMER_TAG:benthos-consumer}
          max_batch_count: ${INPUT_AMQP_MAX_BATCH_COUNT:1}
          prefetch_count: ${INPUT_AMQP_PREFETCH_COUNT:10}
          prefetch_size: ${INPUT_AMQP_PREFETCH_SIZE:0}
          queue: ${INPUT_AMQP_QUEUE:benthos-queue}
          queue_declare:
            durable: ${INPUT_AMQP_QUEUE_DECLARE_DURABLE:true}
            enabled: ${INPUT_AMQP_QUEUE_DECLARE_ENABLED:false}
          tls:
            enabled: ${INPUT_AMQP_TLS_ENABLED:false}
            root_cas_file: ${INPUT_AMQP_TLS_ROOT_CAS_FILE}
            skip_cert_verify: ${INPUT_AMQP_TLS_SKIP_CERT_VERIFY:false}
          url: ${INPUT_AMQP_URL:amqp://guest:guest@localhost:5672/}
        amqp_0_9:
          batching:
            byte_size: ${INPUT_AMQP_0_9_BATCHING_BYTE_SIZE:0}
            check: ${INPUT_AMQP_0_9_BATCHING_CHECK}
            count: ${INPUT_AMQP_0_9_BATCHING_COUNT:0}
            period: ${INPUT_AMQP_0_9_BATCHING_PERIOD}
          consumer_tag: ${INPUT_AMQP_0_9_CONSUMER_TAG:benthos-consumer}
          prefetch_count: ${INPUT_AMQP_0_9_PREFETCH_COUNT:10}
          prefetch_size: ${INPUT_AMQP_0_9_PREFETCH_SIZE:0}
          queue: ${INPUT_AMQP_0_9_QUEUE:benthos-queue}
          queue_declare:
            durable: ${INPUT_AMQP_0_9_QUEUE_DECLARE_DURABLE:true}
            enabled: ${INPUT_AMQP_0_9_QUEUE_DECLARE_ENABLED:false}
          tls:
            enabled: ${INPUT_AMQP_0_9_TLS_ENABLED:false}
            root_cas_file: ${INPUT_AMQP_0_9_TLS_ROOT_CAS_FILE}
            skip_cert_verify: ${INPUT_AMQP_0_9_TLS_SKIP_CERT_VERIFY:false}
          url: ${INPUT_AMQP_0_9_URL:amqp://guest:guest@localhost:5672/}
        amqp_1:
          sasl:
            mechanism: ${INPUT_AMQP_1_SASL_MECHANISM:none}
            password: ${INPUT_AMQP_1_SASL_PASSWORD}
            user: ${INPUT_AMQP_1_SASL_USER}
          source_address: ${INPUT_AMQP_1_SOURCE_ADDRESS}
          tls:
            enabled: ${INPUT_AMQP_1_TLS_ENABLED:false}
            root_cas_file: ${INPUT_AMQP_1_TLS_ROOT_CAS_FILE}
            skip_cert_verify: ${INPUT_AMQP_1_TLS_SKIP_CERT_VERIFY:false}
          url: ${INPUT_AMQP_1_URL}
        bloblang:
          count: ${INPUT_BLOBLANG_COUNT:0}
          interval: ${INPUT_BLOBLANG_INTERVAL:1s}
          mapping: ${INPUT_BLOBLANG_MAPPING}
        csv:
          batch_count: ${INPUT_CSV_BATCH_COUNT:1}
          delimiter: ${INPUT_CSV_DELIMITER:","}
          parse_header_row: ${INPUT_CSV_PARSE_HEADER_ROW:true}
        dynamic:
          prefix: ${INPUT_DYNAMIC_PREFIX}
          timeout: ${INPUT_DYNAMIC_TIMEOUT:5s}
        file:
          delimiter: ${INPUT_FILE_DELIMITER}
          max_buffer: ${INPUT_FILE_MAX_BUFFER:1000000}
          multipart: ${INPUT_FILE_MULTIPART:false}
          path: ${INPUT_FILE_PATH}
        files:
          delete_files: ${INPUT_FILES_DELETE_FILES:false}
          path: ${INPUT_FILES_PATH}
        gcp_pubsub:
          batching:
            byte_size: ${INPUT_GCP_PUBSUB_BATCHING_BYTE_SIZE:0}
            check: ${INPUT_GCP_PUBSUB_BATCHING_CHECK}
            count: ${INPUT_GCP_PUBSUB_BATCHING_COUNT:0}
            period: ${INPUT_GCP_PUBSUB_BATCHING_PERIOD}
          max_batch_count: ${INPUT_GCP_PUBSUB_MAX_BATCH_COUNT:1}
          max_outstanding_bytes: ${INPUT_GCP_PUBSUB_MAX_OUTSTANDING_BYTES:1000000000}
          max_outstanding_messages: ${INPUT_GCP_PUBSUB_MAX_OUTSTANDING_MESSAGES:1000}
          project: ${INPUT_GCP_PUBSUB_PROJECT}
          subscription: ${INPUT_GCP_PUBSUB_SUBSCRIPTION}
        hdfs:
          directory: ${INPUT_HDFS_DIRECTORY}
          hosts:
            - ${INPUT_HDFS_HOSTS:localhost:9000}
          user: ${INPUT_HDFS_USER:benthos_hdfs}
        http_client:
          backoff_on:
            - ${INPUT_HTTP_CLIENT_BACKOFF_ON:429}
          basic_auth:
            enabled: ${INPUT_HTTP_CLIENT_BASIC_AUTH_ENABLED:false}
            password: ${INPUT_HTTP_CLIENT_BASIC_AUTH_PASSWORD}
            username: ${INPUT_HTTP_CLIENT_BASIC_AUTH_USERNAME}
          copy_response_headers: ${INPUT_HTTP_CLIENT_COPY_RESPONSE_HEADERS:false}
          drop_empty_bodies: ${INPUT_HTTP_CLIENT_DROP_EMPTY_BODIES:true}
          headers:
            Content-Type: ${INPUT_HTTP_CLIENT_HEADERS_CONTENT_TYPE:application/octet-stream}
          max_retry_backoff: ${INPUT_HTTP_CLIENT_MAX_RETRY_BACKOFF:300s}
          oauth:
            access_token: ${INPUT_HTTP_CLIENT_OAUTH_ACCESS_TOKEN}
            access_token_secret: ${INPUT_HTTP_CLIENT_OAUTH_ACCESS_TOKEN_SECRET}
            consumer_key: ${INPUT_HTTP_CLIENT_OAUTH_CONSUMER_KEY}
            consumer_secret: ${INPUT_HTTP_CLIENT_OAUTH_CONSUMER_SECRET}
            enabled: ${INPUT_HTTP_CLIENT_OAUTH_ENABLED:false}
            request_url: ${INPUT_HTTP_CLIENT_OAUTH_REQUEST_URL}
          oauth2:
            client_key: ${INPUT_HTTP_CLIENT_OAUTH2_CLIENT_KEY}
            client_secret: ${INPUT_HTTP_CLIENT_OAUTH2_CLIENT_SECRET}
            enabled: ${INPUT_HTTP_CLIENT_OAUTH2_ENABLED:false}
            token_url: ${INPUT_HTTP_CLIENT_OAUTH2_TOKEN_URL}
          payload: ${INPUT_HTTP_CLIENT_PAYLOAD}
          proxy_url: ${INPUT_HTTP_CLIENT_PROXY_URL}
          rate_limit: ${INPUT_HTTP_CLIENT_RATE_LIMIT}
          retries: ${INPUT_HTTP_CLIENT_RETRIES:3}
          retry_period: ${INPUT_HTTP_CLIENT_RETRY_PERIOD:1s}
          stream:
            delimiter: ${INPUT_HTTP_CLIENT_STREAM_DELIMITER}
            enabled: ${INPUT_HTTP_CLIENT_STREAM_ENABLED:false}
            max_buffer: ${INPUT_HTTP_CLIENT_STREAM_MAX_BUFFER:1000000}
            multipart: ${INPUT_HTTP_CLIENT_STREAM_MULTIPART:false}
            reconnect: ${INPUT_HTTP_CLIENT_STREAM_RECONNECT:true}
          timeout: ${INPUT_HTTP_CLIENT_TIMEOUT:5s}
          tls:
            enabled: ${INPUT_HTTP_CLIENT_TLS_ENABLED:false}
            root_cas_file: ${INPUT_HTTP_CLIENT_TLS_ROOT_CAS_FILE}
            skip_cert_verify: ${INPUT_HTTP_CLIENT_TLS_SKIP_CERT_VERIFY:false}
          url: ${INPUT_HTTP_CLIENT_URL:http://localhost:4195/get}
          verb: ${INPUT_HTTP_CLIENT_VERB:GET}
        http_server:
          address: ${INPUT_HTTP_SERVER_ADDRESS}
          cert_file: ${INPUT_HTTP_SERVER_CERT_FILE}
          key_file: ${INPUT_HTTP_SERVER_KEY_FILE}
          path: ${INPUT_HTTP_SERVER_PATH:/post}
          rate_limit: ${INPUT_HTTP_SERVER_RATE_LIMIT}
          sync_response:
            headers:
              Content-Type: ${INPUT_HTTP_SERVER_SYNC_RESPONSE_HEADERS_CONTENT_TYPE:application/octet-stream}
            status: ${INPUT_HTTP_SERVER_SYNC_RESPONSE_STATUS:200}
          timeout: ${INPUT_HTTP_SERVER_TIMEOUT:5s}
          ws_path: ${INPUT_HTTP_SERVER_WS_PATH:/post/ws}
          ws_rate_limit_message: ${INPUT_HTTP_SERVER_WS_RATE_LIMIT_MESSAGE}
          ws_welcome_message: ${INPUT_HTTP_SERVER_WS_WELCOME_MESSAGE}
        inproc: ${INPUT_INPROC}
        kafka:
          addresses:
            - ${INPUT_KAFKA_ADDRESSES:localhost:9092}
          batching:
            byte_size: ${INPUT_KAFKA_BATCHING_BYTE_SIZE:0}
            check: ${INPUT_KAFKA_BATCHING_CHECK}
            count: ${INPUT_KAFKA_BATCHING_COUNT:0}
            period: ${INPUT_KAFKA_BATCHING_PERIOD}
          client_id: ${INPUT_KAFKA_CLIENT_ID:benthos_kafka_input}
          commit_period: ${INPUT_KAFKA_COMMIT_PERIOD:1s}
          consumer_group: ${INPUT_KAFKA_CONSUMER_GROUP:benthos_consumer_group}
          fetch_buffer_cap: ${INPUT_KAFKA_FETCH_BUFFER_CAP:256}
          max_batch_count: ${INPUT_KAFKA_MAX_BATCH_COUNT:1}
          max_processing_period: ${INPUT_KAFKA_MAX_PROCESSING_PERIOD:100ms}
          partition: ${INPUT_KAFKA_PARTITION:0}
          sasl:
            access_token: ${INPUT_KAFKA_SASL_ACCESS_TOKEN}
            enabled: ${INPUT_KAFKA_SASL_ENABLED:false}
            mechanism: ${INPUT_KAFKA_SASL_MECHANISM}
            password: ${INPUT_KAFKA_SASL_PASSWORD}
            token_cache: ${INPUT_KAFKA_SASL_TOKEN_CACHE}
            token_key: ${INPUT_KAFKA_SASL_TOKEN_KEY}
            user: ${INPUT_KAFKA_SASL_USER}
          start_from_oldest: ${INPUT_KAFKA_START_FROM_OLDEST:true}
          target_version: ${INPUT_KAFKA_TARGET_VERSION:1.0.0}
          tls:
            enabled: ${INPUT_KAFKA_TLS_ENABLED:false}
            root_cas_file: ${INPUT_KAFKA_TLS_ROOT_CAS_FILE}
            skip_cert_verify: ${INPUT_KAFKA_TLS_SKIP_CERT_VERIFY:false}
          topic: ${INPUT_KAFKA_TOPIC:benthos_stream}
        kafka_balanced:
          addresses:
            - ${INPUT_KAFKA_BALANCED_ADDRESSES:localhost:9092}
          batching:
            byte_size: ${INPUT_KAFKA_BALANCED_BATCHING_BYTE_SIZE:0}
            check: ${INPUT_KAFKA_BALANCED_BATCHING_CHECK}
            count: ${INPUT_KAFKA_BALANCED_BATCHING_COUNT:0}
            period: ${INPUT_KAFKA_BALANCED_BATCHING_PERIOD}
          client_id: ${INPUT_KAFKA_BALANCED_CLIENT_ID:benthos_kafka_input}
          commit_period: ${INPUT_KAFKA_BALANCED_COMMIT_PERIOD:1s}
          consumer_group: ${INPUT_KAFKA_BALANCED_CONSUMER_GROUP:benthos_consumer_group}
          fetch_buffer_cap: ${INPUT_KAFKA_BALANCED_FETCH_BUFFER_CAP:256}
          group:
            heartbeat_interval: ${INPUT_KAFKA_BALANCED_GROUP_HEARTBEAT_INTERVAL:3s}
            rebalance_timeout: ${INPUT_KAFKA_BALANCED_GROUP_REBALANCE_TIMEOUT:60s}
            session_timeout: ${INPUT_KAFKA_BALANCED_GROUP_SESSION_TIMEOUT:10s}
          max_batch_count: ${INPUT_KAFKA_BALANCED_MAX_BATCH_COUNT:1}
          max_processing_period: ${INPUT_KAFKA_BALANCED_MAX_PROCESSING_PERIOD:100ms}
          sasl:
            access_token: ${INPUT_KAFKA_BALANCED_SASL_ACCESS_TOKEN}
            enabled: ${INPUT_KAFKA_BALANCED_SASL_ENABLED:false}
            mechanism: ${INPUT_KAFKA_BALANCED_SASL_MECHANISM}
            password: ${INPUT_KAFKA_BALANCED_SASL_PASSWORD}
            token_cache: ${INPUT_KAFKA_BALANCED_SASL_TOKEN_CACHE}
            token_key: ${INPUT_KAFKA_BALANCED_SASL_TOKEN_KEY}
            user: ${INPUT_KAFKA_BALANCED_SASL_USER}
          start_from_oldest: ${INPUT_KAFKA_BALANCED_START_FROM_OLDEST:true}
          target_version: ${INPUT_KAFKA_BALANCED_TARGET_VERSION:1.0.0}
          tls:
            enabled: ${INPUT_KAFKA_BALANCED_TLS_ENABLED:false}
            root_cas_file: ${INPUT_KAFKA_BALANCED_TLS_ROOT_CAS_FILE}
            skip_cert_verify: ${INPUT_KAFKA_BALANCED_TLS_SKIP_CERT_VERIFY:false}
          topics:
            - ${INPUT_KAFKA_BALANCED_TOPICS:benthos_stream}
        kinesis:
          batching:
            byte_size: ${INPUT_KINESIS_BATCHING_BYTE_SIZE:0}
            check: ${INPUT_KINESIS_BATCHING_CHECK}
            count: ${INPUT_KINESIS_BATCHING_COUNT:0}
            period: ${INPUT_KINESIS_BATCHING_PERIOD}
          client_id: ${INPUT_KINESIS_CLIENT_ID:benthos_consumer}
          commit_period: ${INPUT_KINESIS_COMMIT_PERIOD:1s}
          credentials:
            id: ${INPUT_KINESIS_CREDENTIALS_ID}
            profile: ${INPUT_KINESIS_CREDENTIALS_PROFILE}
            role: ${INPUT_KINESIS_CREDENTIALS_ROLE}
            role_external_id: ${INPUT_KINESIS_CREDENTIALS_ROLE_EXTERNAL_ID}
            secret: ${INPUT_KINESIS_CREDENTIALS_SECRET}
            token: ${INPUT_KINESIS_CREDENTIALS_TOKEN}
          dynamodb_table: ${INPUT_KINESIS_DYNAMODB_TABLE}
          endpoint: ${INPUT_KINESIS_ENDPOINT}
          limit: ${INPUT_KINESIS_LIMIT:100}
          region: ${INPUT_KINESIS_REGION:eu-west-1}
          shard: ${INPUT_KINESIS_SHARD:0}
          start_from_oldest: ${INPUT_KINESIS_START_FROM_OLDEST:true}
          stream: ${INPUT_KINESIS_STREAM}
          timeout: ${INPUT_KINESIS_TIMEOUT:5s}
        kinesis_balanced:
          batching:
            byte_size: ${INPUT_KINESIS_BALANCED_BATCHING_BYTE_SIZE:0}
            check: ${INPUT_KINESIS_BALANCED_BATCHING_CHECK}
            count: ${INPUT_KINESIS_BALANCED_BATCHING_COUNT:0}
            period: ${INPUT_KINESIS_BALANCED_BATCHING_PERIOD}
          credentials:
            id: ${INPUT_KINESIS_BALANCED_CREDENTIALS_ID}
            profile: ${INPUT_KINESIS_BALANCED_CREDENTIALS_PROFILE}
            role: ${INPUT_KINESIS_BALANCED_CREDENTIALS_ROLE}
            role_external_id: ${INPUT_KINESIS_BALANCED_CREDENTIALS_ROLE_EXTERNAL_ID}
            secret: ${INPUT_KINESIS_BALANCED_CREDENTIALS_SECRET}
            token: ${INPUT_KINESIS_BALANCED_CREDENTIALS_TOKEN}
          dynamodb_billing_mode: ${INPUT_KINESIS_BALANCED_DYNAMODB_BILLING_MODE}
          dynamodb_read_provision: ${INPUT_KINESIS_BALANCED_DYNAMODB_READ_PROVISION:0}
          dynamodb_table: ${INPUT_KINESIS_BALANCED_DYNAMODB_TABLE}
          dynamodb_write_provision: ${INPUT_KINESIS_BALANCED_DYNAMODB_WRITE_PROVISION:0}
          endpoint: ${INPUT_KINESIS_BALANCED_ENDPOINT}
          max_batch_count: ${INPUT_KINESIS_BALANCED_MAX_BATCH_COUNT:1}
          region: ${INPUT_KINESIS_BALANCED_REGION:eu-west-1}
          start_from_oldest: ${INPUT_KINESIS_BALANCED_START_FROM_OLDEST:true}
          stream: ${INPUT_KINESIS_BALANCED_STREAM}
        mqtt:
          clean_session: ${INPUT_MQTT_CLEAN_SESSION:true}
          client_id: ${INPUT_MQTT_CLIENT_ID:benthos_input}
          password: ${INPUT_MQTT_PASSWORD}
          qos: ${INPUT_MQTT_QOS:1}
          stale_connection_timeout: ${INPUT_MQTT_STALE_CONNECTION_TIMEOUT}
          topics:
            - ${INPUT_MQTT_TOPICS:benthos_topic}
          urls:
            - ${INPUT_MQTT_URLS:tcp://localhost:1883}
          user: ${INPUT_MQTT_USER}
        nanomsg:
          bind: ${INPUT_NANOMSG_BIND:true}
          poll_timeout: ${INPUT_NANOMSG_POLL_TIMEOUT:5s}
          reply_timeout: ${INPUT_NANOMSG_REPLY_TIMEOUT:5s}
          socket_type: ${INPUT_NANOMSG_SOCKET_TYPE:PULL}
          urls:
            - ${INPUT_NANOMSG_URLS:tcp://*:5555}
        nats:
          prefetch_count: ${INPUT_NATS_PREFETCH_COUNT:32}
          queue: ${INPUT_NATS_QUEUE:benthos_queue}
          subject: ${INPUT_NATS_SUBJECT:benthos_messages}
          urls:
            - ${INPUT_NATS_URLS:nats://127.0.0.1:4222}
        nats_stream:
          ack_wait: ${INPUT_NATS_STREAM_ACK_WAIT:30s}
          batching:
            byte_size: ${INPUT_NATS_STREAM_BATCHING_BYTE_SIZE:0}
            check: ${INPUT_NATS_STREAM_BATCHING_CHECK}
            count: ${INPUT_NATS_STREAM_BATCHING_COUNT:0}
            period: ${INPUT_NATS_STREAM_BATCHING_PERIOD}
          client_id: ${INPUT_NATS_STREAM_CLIENT_ID:benthos_client}
          cluster_id: ${INPUT_NATS_STREAM_CLUSTER_ID:test-cluster}
          durable_name: ${INPUT_NATS_STREAM_DURABLE_NAME:benthos_offset}
          max_inflight: ${INPUT_NATS_STREAM_MAX_INFLIGHT:1024}
          queue: ${INPUT_NATS_STREAM_QUEUE:benthos_queue}
          start_from_oldest: ${INPUT_NATS_STREAM_START_FROM_OLDEST:true}
          subject: ${INPUT_NATS_STREAM_SUBJECT:benthos_messages}
          unsubscribe_on_close: ${INPUT_NATS_STREAM_UNSUBSCRIBE_ON_CLOSE:false}
          urls:
            - ${INPUT_NATS_STREAM_URLS:nats://127.0.0.1:4222}
        nsq:
          batching:
            byte_size: ${INPUT_NSQ_BATCHING_BYTE_SIZE:0}
            check: ${INPUT_NSQ_BATCHING_CHECK}
            count: ${INPUT_NSQ_BATCHING_COUNT:0}
            period: ${INPUT_NSQ_BATCHING_PERIOD}
          channel: ${INPUT_NSQ_CHANNEL:benthos_stream}
          lookupd_http_addresses:
            - ${INPUT_NSQ_LOOKUPD_HTTP_ADDRESSES:localhost:4161}
          max_in_flight: ${INPUT_NSQ_MAX_IN_FLIGHT:100}
          nsqd_tcp_addresses:
            - ${INPUT_NSQ_NSQD_TCP_ADDRESSES:localhost:4150}
          tls:
            enabled: ${INPUT_NSQ_TLS_ENABLED:false}
            root_cas_file: ${INPUT_NSQ_TLS_ROOT_CAS_FILE}
            skip_cert_verify: ${INPUT_NSQ_TLS_SKIP_CERT_VERIFY:false}
          topic: ${INPUT_NSQ_TOPIC:benthos_messages}
          user_agent: ${INPUT_NSQ_USER_AGENT:benthos_consumer}
        redis_list:
          key: ${INPUT_REDIS_LIST_KEY:benthos_list}
          timeout: ${INPUT_REDIS_LIST_TIMEOUT:5s}
          url: ${INPUT_REDIS_LIST_URL:tcp://localhost:6379}
        redis_pubsub:
          channels:
            - ${INPUT_REDIS_PUBSUB_CHANNELS:benthos_chan}
          url: ${INPUT_REDIS_PUBSUB_URL:tcp://localhost:6379}
          use_patterns: ${INPUT_REDIS_PUBSUB_USE_PATTERNS:false}
        redis_streams:
          batching:
            byte_size: ${INPUT_REDIS_STREAMS_BATCHING_BYTE_SIZE:0}
            check: ${INPUT_REDIS_STREAMS_BATCHING_CHECK}
            count: ${INPUT_REDIS_STREAMS_BATCHING_COUNT:0}
            period: ${INPUT_REDIS_STREAMS_BATCHING_PERIOD}
          body_key: ${INPUT_REDIS_STREAMS_BODY_KEY:body}
          client_id: ${INPUT_REDIS_STREAMS_CLIENT_ID:benthos_consumer}
          commit_period: ${INPUT_REDIS_STREAMS_COMMIT_PERIOD:1s}
          consumer_group: ${INPUT_REDIS_STREAMS_CONSUMER_GROUP:benthos_group}
          limit: ${INPUT_REDIS_STREAMS_LIMIT:10}
          start_from_oldest: ${INPUT_REDIS_STREAMS_START_FROM_OLDEST:true}
          streams:
            - ${INPUT_REDIS_STREAMS_STREAMS:benthos_stream}
          timeout: ${INPUT_REDIS_STREAMS_TIMEOUT:1s}
          url: ${INPUT_REDIS_STREAMS_URL:tcp://localhost:6379}
        resource: ${INPUT_RESOURCE}
        s3:
          bucket: ${INPUT_S3_BUCKET}
          credentials:
            id: ${INPUT_S3_CREDENTIALS_ID}
            profile: ${INPUT_S3_CREDENTIALS_PROFILE}
            role: ${INPUT_S3_CREDENTIALS_ROLE}
            role_external_id: ${INPUT_S3_CREDENTIALS_ROLE_EXTERNAL_ID}
            secret: ${INPUT_S3_CREDENTIALS_SECRET}
            token: ${INPUT_S3_CREDENTIALS_TOKEN}
          delete_objects: ${INPUT_S3_DELETE_OBJECTS:false}
          download_manager:
            enabled: ${INPUT_S3_DOWNLOAD_MANAGER_ENABLED:true}
          endpoint: ${INPUT_S3_ENDPOINT}
          force_path_style_urls: ${INPUT_S3_FORCE_PATH_STYLE_URLS:false}
          max_batch_count: ${INPUT_S3_MAX_BATCH_COUNT:1}
          prefix: ${INPUT_S3_PREFIX}
          region: ${INPUT_S3_REGION:eu-west-1}
          retries: ${INPUT_S3_RETRIES:3}
          sqs_body_path: ${INPUT_S3_SQS_BODY_PATH:Records.*.s3.object.key}
          sqs_bucket_path: ${INPUT_S3_SQS_BUCKET_PATH}
          sqs_endpoint: ${INPUT_S3_SQS_ENDPOINT}
          sqs_envelope_path: ${INPUT_S3_SQS_ENVELOPE_PATH}
          sqs_max_messages: ${INPUT_S3_SQS_MAX_MESSAGES:10}
          sqs_url: ${INPUT_S3_SQS_URL}
          timeout: ${INPUT_S3_TIMEOUT:5s}
        socket:
          address: ${INPUT_SOCKET_ADDRESS:/tmp/benthos.sock}
          delimiter: ${INPUT_SOCKET_DELIMITER}
          max_buffer: ${INPUT_SOCKET_MAX_BUFFER:1000000}
          multipart: ${INPUT_SOCKET_MULTIPART:false}
          network: ${INPUT_SOCKET_NETWORK:unix}
        socket_server:
          address: ${INPUT_SOCKET_SERVER_ADDRESS:/tmp/benthos.sock}
          delimiter: ${INPUT_SOCKET_SERVER_DELIMITER}
          max_buffer: ${INPUT_SOCKET_SERVER_MAX_BUFFER:1000000}
          multipart: ${INPUT_SOCKET_SERVER_MULTIPART:false}
          network: ${INPUT_SOCKET_SERVER_NETWORK:unix}
        sqs:
          credentials:
            id: ${INPUT_SQS_CREDENTIALS_ID}
            profile: ${INPUT_SQS_CREDENTIALS_PROFILE}
            role: ${INPUT_SQS_CREDENTIALS_ROLE}
            role_external_id: ${INPUT_SQS_CREDENTIALS_ROLE_EXTERNAL_ID}
            secret: ${INPUT_SQS_CREDENTIALS_SECRET}
            token: ${INPUT_SQS_CREDENTIALS_TOKEN}
          delete_message: ${INPUT_SQS_DELETE_MESSAGE:true}
          endpoint: ${INPUT_SQS_ENDPOINT}
          max_number_of_messages: ${INPUT_SQS_MAX_NUMBER_OF_MESSAGES:1}
          region: ${INPUT_SQS_REGION:eu-west-1}
          timeout: ${INPUT_SQS_TIMEOUT:5s}
          url: ${INPUT_SQS_URL}
        stdin:
          delimiter: ${INPUT_STDIN_DELIMITER}
          max_buffer: ${INPUT_STDIN_MAX_BUFFER:1000000}
          multipart: ${INPUT_STDIN_MULTIPART:false}
        tcp:
          address: ${INPUT_TCP_ADDRESS:localhost:4194}
          delimiter: ${INPUT_TCP_DELIMITER}
          max_buffer: ${INPUT_TCP_MAX_BUFFER:1000000}
          multipart: ${INPUT_TCP_MULTIPART:false}
        tcp_server:
          address: ${INPUT_TCP_SERVER_ADDRESS:127.0.0.1:0}
          delimiter: ${INPUT_TCP_SERVER_DELIMITER}
          max_buffer: ${INPUT_TCP_SERVER_MAX_BUFFER:1000000}
          multipart: ${INPUT_TCP_SERVER_MULTIPART:false}
        type: ${INPUT_TYPE:dynamic}
        udp_server:
          address: ${INPUT_UDP_SERVER_ADDRESS:127.0.0.1:0}
          delimiter: ${INPUT_UDP_SERVER_DELIMITER}
          max_buffer: ${INPUT_UDP_SERVER_MAX_BUFFER:1000000}
        websocket:
          basic_auth:
            enabled: ${INPUT_WEBSOCKET_BASIC_AUTH_ENABLED:false}
            password: ${INPUT_WEBSOCKET_BASIC_AUTH_PASSWORD}
            username: ${INPUT_WEBSOCKET_BASIC_AUTH_USERNAME}
          oauth:
            access_token: ${INPUT_WEBSOCKET_OAUTH_ACCESS_TOKEN}
            access_token_secret: ${INPUT_WEBSOCKET_OAUTH_ACCESS_TOKEN_SECRET}
            consumer_key: ${INPUT_WEBSOCKET_OAUTH_CONSUMER_KEY}
            consumer_secret: ${INPUT_WEBSOCKET_OAUTH_CONSUMER_SECRET}
            enabled: ${INPUT_WEBSOCKET_OAUTH_ENABLED:false}
            request_url: ${INPUT_WEBSOCKET_OAUTH_REQUEST_URL}
          open_message: ${INPUT_WEBSOCKET_OPEN_MESSAGE}
          url: ${INPUT_WEBSOCKET_URL:ws://localhost:4195/get/ws}
        zmq4:
          bind: ${INPUT_ZMQ4_BIND:false}
          high_water_mark: ${INPUT_ZMQ4_HIGH_WATER_MARK:0}
          poll_timeout: ${INPUT_ZMQ4_POLL_TIMEOUT:5s}
          socket_type: ${INPUT_ZMQ4_SOCKET_TYPE:PULL}
          urls:
            - ${INPUT_ZMQ4_URLS:tcp://localhost:5555}
  type: broker
buffer:
  memory:
    limit: ${BUFFER_MEMORY_LIMIT:524288000}
  type: ${BUFFER_TYPE:none}
pipeline:
  processors:
    - archive:
        format: ${PROCESSOR_ARCHIVE_FORMAT:binary}
        path: ${PROCESSOR_ARCHIVE_PATH:${!count("files")}-${!timestamp_unix_nano()}.txt}
      avro:
        encoding: ${PROCESSOR_AVRO_ENCODING:textual}
        operator: ${PROCESSOR_AVRO_OPERATOR:to_json}
        schema: ${PROCESSOR_AVRO_SCHEMA}
        schema_path: ${PROCESSOR_AVRO_SCHEMA_PATH}
      awk:
        codec: ${PROCESSOR_AWK_CODEC:text}
        program: ${PROCESSOR_AWK_PROGRAM:BEGIN { x = 0 } { print $0, x; x++ }}
      batch:
        byte_size: ${PROCESSOR_BATCH_BYTE_SIZE:0}
        condition:
          bloblang: ${PROCESSOR_BATCH_CONDITION_BLOBLANG}
          bounds_check:
            max_part_size: ${PROCESSOR_BATCH_CONDITION_BOUNDS_CHECK_MAX_PART_SIZE:1073741824}
            max_parts: ${PROCESSOR_BATCH_CONDITION_BOUNDS_CHECK_MAX_PARTS:100}
            min_part_size: ${PROCESSOR_BATCH_CONDITION_BOUNDS_CHECK_MIN_PART_SIZE:1}
            min_parts: ${PROCESSOR_BATCH_CONDITION_BOUNDS_CHECK_MIN_PARTS:1}
          check_interpolation:
            value: ${PROCESSOR_BATCH_CONDITION_CHECK_INTERPOLATION_VALUE}
          count:
            arg: ${PROCESSOR_BATCH_CONDITION_COUNT_ARG:100}
          jmespath:
            part: ${PROCESSOR_BATCH_CONDITION_JMESPATH_PART:0}
            query: ${PROCESSOR_BATCH_CONDITION_JMESPATH_QUERY}
          json:
            arg: ${PROCESSOR_BATCH_CONDITION_JSON_ARG}
            operator: ${PROCESSOR_BATCH_CONDITION_JSON_OPERATOR:exists}
            part: ${PROCESSOR_BATCH_CONDITION_JSON_PART:0}
            path: ${PROCESSOR_BATCH_CONDITION_JSON_PATH}
          json_schema:
            part: ${PROCESSOR_BATCH_CONDITION_JSON_SCHEMA_PART:0}
            schema: ${PROCESSOR_BATCH_CONDITION_JSON_SCHEMA_SCHEMA}
            schema_path: ${PROCESSOR_BATCH_CONDITION_JSON_SCHEMA_SCHEMA_PATH}
          metadata:
            arg: ${PROCESSOR_BATCH_CONDITION_METADATA_ARG}
            key: ${PROCESSOR_BATCH_CONDITION_METADATA_KEY}
            operator: ${PROCESSOR_BATCH_CONDITION_METADATA_OPERATOR:equals_cs}
            part: ${PROCESSOR_BATCH_CONDITION_METADATA_PART:0}
          number:
            arg: ${PROCESSOR_BATCH_CONDITION_NUMBER_ARG:0}
            operator: ${PROCESSOR_BATCH_CONDITION_NUMBER_OPERATOR:equals}
            part: ${PROCESSOR_BATCH_CONDITION_NUMBER_PART:0}
          processor_failed:
            part: ${PROCESSOR_BATCH_CONDITION_PROCESSOR_FAILED_PART:0}
          resource: ${PROCESSOR_BATCH_CONDITION_RESOURCE}
          static: ${PROCESSOR_BATCH_CONDITION_STATIC:false}
          text:
            arg: ${PROCESSOR_BATCH_CONDITION_TEXT_ARG}
            operator: ${PROCESSOR_BATCH_CONDITION_TEXT_OPERATOR:equals_cs}
            part: ${PROCESSOR_BATCH_CONDITION_TEXT_PART:0}
          type: ${PROCESSOR_BATCH_CONDITION_TYPE:static}
        count: ${PROCESSOR_BATCH_COUNT:0}
        period: ${PROCESSOR_BATCH_PERIOD}
      bloblang: ${PROCESSOR_BLOBLANG}
      bounds_check:
        max_part_size: ${PROCESSOR_BOUNDS_CHECK_MAX_PART_SIZE:1073741824}
        max_parts: ${PROCESSOR_BOUNDS_CHECK_MAX_PARTS:100}
        min_part_size: ${PROCESSOR_BOUNDS_CHECK_MIN_PART_SIZE:1}
        min_parts: ${PROCESSOR_BOUNDS_CHECK_MIN_PARTS:1}
      branch:
        request_map: ${PROCESSOR_BRANCH_REQUEST_MAP}
        result_map: ${PROCESSOR_BRANCH_RESULT_MAP}
      cache:
        cache: ${PROCESSOR_CACHE_CACHE}
        key: ${PROCESSOR_CACHE_KEY}
        operator: ${PROCESSOR_CACHE_OPERATOR:set}
        resource: ${PROCESSOR_CACHE_RESOURCE}
        value: ${PROCESSOR_CACHE_VALUE}
      compress:
        algorithm: ${PROCESSOR_COMPRESS_ALGORITHM:gzip}
        level: ${PROCESSOR_COMPRESS_LEVEL:-1}
      decode:
        scheme: ${PROCESSOR_DECODE_SCHEME:base64}
      decompress:
        algorithm: ${PROCESSOR_DECOMPRESS_ALGORITHM:gzip}
      encode:
        scheme: ${PROCESSOR_ENCODE_SCHEME:base64}
      grok:
        named_captures_only: ${PROCESSOR_GROK_NAMED_CAPTURES_ONLY:true}
        output_format: ${PROCESSOR_GROK_OUTPUT_FORMAT:json}
        remove_empty_values: ${PROCESSOR_GROK_REMOVE_EMPTY_VALUES:true}
        use_default_patterns: ${PROCESSOR_GROK_USE_DEFAULT_PATTERNS:true}
      group_by_value:
        value: ${PROCESSOR_GROUP_BY_VALUE_VALUE:${! meta("example") }}
      hash:
        algorithm: ${PROCESSOR_HASH_ALGORITHM:sha256}
        key: ${PROCESSOR_HASH_KEY}
      hash_sample:
        parts:
          - ${PROCESSOR_HASH_SAMPLE_PARTS:0}
        retain_max: ${PROCESSOR_HASH_SAMPLE_RETAIN_MAX:10}
        retain_min: ${PROCESSOR_HASH_SAMPLE_RETAIN_MIN:0}
      http:
        backoff_on:
          - ${PROCESSOR_HTTP_BACKOFF_ON:429}
        basic_auth:
          enabled: ${PROCESSOR_HTTP_BASIC_AUTH_ENABLED:false}
          password: ${PROCESSOR_HTTP_BASIC_AUTH_PASSWORD}
          username: ${PROCESSOR_HTTP_BASIC_AUTH_USERNAME}
        copy_response_headers: ${PROCESSOR_HTTP_COPY_RESPONSE_HEADERS:false}
        headers:
          Content-Type: ${PROCESSOR_HTTP_HEADERS_CONTENT_TYPE:application/octet-stream}
        max_parallel: ${PROCESSOR_HTTP_MAX_PARALLEL:0}
        max_retry_backoff: ${PROCESSOR_HTTP_MAX_RETRY_BACKOFF:300s}
        oauth:
          access_token: ${PROCESSOR_HTTP_OAUTH_ACCESS_TOKEN}
          access_token_secret: ${PROCESSOR_HTTP_OAUTH_ACCESS_TOKEN_SECRET}
          consumer_key: ${PROCESSOR_HTTP_OAUTH_CONSUMER_KEY}
          consumer_secret: ${PROCESSOR_HTTP_OAUTH_CONSUMER_SECRET}
          enabled: ${PROCESSOR_HTTP_OAUTH_ENABLED:false}
          request_url: ${PROCESSOR_HTTP_OAUTH_REQUEST_URL}
        oauth2:
          client_key: ${PROCESSOR_HTTP_OAUTH2_CLIENT_KEY}
          client_secret: ${PROCESSOR_HTTP_OAUTH2_CLIENT_SECRET}
          enabled: ${PROCESSOR_HTTP_OAUTH2_ENABLED:false}
          token_url: ${PROCESSOR_HTTP_OAUTH2_TOKEN_URL}
        parallel: ${PROCESSOR_HTTP_PARALLEL:false}
        proxy_url: ${PROCESSOR_HTTP_PROXY_URL}
        rate_limit: ${PROCESSOR_HTTP_RATE_LIMIT}
        request:
          backoff_on:
            - ${PROCESSOR_HTTP_REQUEST_BACKOFF_ON:429}
          basic_auth:
            enabled: ${PROCESSOR_HTTP_REQUEST_BASIC_AUTH_ENABLED:false}
            password: ${PROCESSOR_HTTP_REQUEST_BASIC_AUTH_PASSWORD}
            username: ${PROCESSOR_HTTP_REQUEST_BASIC_AUTH_USERNAME}
          copy_response_headers: ${PROCESSOR_HTTP_REQUEST_COPY_RESPONSE_HEADERS:false}
          headers:
            Content-Type: ${PROCESSOR_HTTP_REQUEST_HEADERS_CONTENT_TYPE:application/octet-stream}
          max_retry_backoff: ${PROCESSOR_HTTP_REQUEST_MAX_RETRY_BACKOFF:300s}
          oauth:
            access_token: ${PROCESSOR_HTTP_REQUEST_OAUTH_ACCESS_TOKEN}
            access_token_secret: ${PROCESSOR_HTTP_REQUEST_OAUTH_ACCESS_TOKEN_SECRET}
            consumer_key: ${PROCESSOR_HTTP_REQUEST_OAUTH_CONSUMER_KEY}
            consumer_secret: ${PROCESSOR_HTTP_REQUEST_OAUTH_CONSUMER_SECRET}
            enabled: ${PROCESSOR_HTTP_REQUEST_OAUTH_ENABLED:false}
            request_url: ${PROCESSOR_HTTP_REQUEST_OAUTH_REQUEST_URL}
          oauth2:
            client_key: ${PROCESSOR_HTTP_REQUEST_OAUTH2_CLIENT_KEY}
            client_secret: ${PROCESSOR_HTTP_REQUEST_OAUTH2_CLIENT_SECRET}
            enabled: ${PROCESSOR_HTTP_REQUEST_OAUTH2_ENABLED:false}
            token_url: ${PROCESSOR_HTTP_REQUEST_OAUTH2_TOKEN_URL}
          proxy_url: ${PROCESSOR_HTTP_REQUEST_PROXY_URL}
          rate_limit: ${PROCESSOR_HTTP_REQUEST_RATE_LIMIT}
          retries: ${PROCESSOR_HTTP_REQUEST_RETRIES:3}
          retry_period: ${PROCESSOR_HTTP_REQUEST_RETRY_PERIOD:1s}
          timeout: ${PROCESSOR_HTTP_REQUEST_TIMEOUT:5s}
          tls:
            enabled: ${PROCESSOR_HTTP_REQUEST_TLS_ENABLED:false}
            root_cas_file: ${PROCESSOR_HTTP_REQUEST_TLS_ROOT_CAS_FILE}
            skip_cert_verify: ${PROCESSOR_HTTP_REQUEST_TLS_SKIP_CERT_VERIFY:false}
          url: ${PROCESSOR_HTTP_REQUEST_URL:http://localhost:4195/post}
          verb: ${PROCESSOR_HTTP_REQUEST_VERB:POST}
        retries: ${PROCESSOR_HTTP_RETRIES:3}
        retry_period: ${PROCESSOR_HTTP_RETRY_PERIOD:1s}
        timeout: ${PROCESSOR_HTTP_TIMEOUT:5s}
        tls:
          enabled: ${PROCESSOR_HTTP_TLS_ENABLED:false}
          root_cas_file: ${PROCESSOR_HTTP_TLS_ROOT_CAS_FILE}
          skip_cert_verify: ${PROCESSOR_HTTP_TLS_SKIP_CERT_VERIFY:false}
        url: ${PROCESSOR_HTTP_URL:http://localhost:4195/post}
        verb: ${PROCESSOR_HTTP_VERB:POST}
      insert_part:
        content: ${PROCESSOR_INSERT_PART_CONTENT}
        index: ${PROCESSOR_INSERT_PART_INDEX:-1}
      jmespath:
        query: ${PROCESSOR_JMESPATH_QUERY}
      jq:
        query: ${PROCESSOR_JQ_QUERY:.}
        raw: ${PROCESSOR_JQ_RAW:false}
      json:
        operator: ${PROCESSOR_JSON_OPERATOR:clean}
        path: ${PROCESSOR_JSON_PATH}
        value: ${PROCESSOR_JSON_VALUE}
      json_schema:
        schema: ${PROCESSOR_JSON_SCHEMA_SCHEMA}
        schema_path: ${PROCESSOR_JSON_SCHEMA_SCHEMA_PATH}
      lambda:
        credentials:
          id: ${PROCESSOR_LAMBDA_CREDENTIALS_ID}
          profile: ${PROCESSOR_LAMBDA_CREDENTIALS_PROFILE}
          role: ${PROCESSOR_LAMBDA_CREDENTIALS_ROLE}
          role_external_id: ${PROCESSOR_LAMBDA_CREDENTIALS_ROLE_EXTERNAL_ID}
          secret: ${PROCESSOR_LAMBDA_CREDENTIALS_SECRET}
          token: ${PROCESSOR_LAMBDA_CREDENTIALS_TOKEN}
        endpoint: ${PROCESSOR_LAMBDA_ENDPOINT}
        function: ${PROCESSOR_LAMBDA_FUNCTION}
        parallel: ${PROCESSOR_LAMBDA_PARALLEL:false}
        rate_limit: ${PROCESSOR_LAMBDA_RATE_LIMIT}
        region: ${PROCESSOR_LAMBDA_REGION:eu-west-1}
        retries: ${PROCESSOR_LAMBDA_RETRIES:3}
        timeout: ${PROCESSOR_LAMBDA_TIMEOUT:5s}
      log:
        level: ${PROCESSOR_LOG_LEVEL:INFO}
        message: ${PROCESSOR_LOG_MESSAGE}
      merge_json:
        retain_parts: ${PROCESSOR_MERGE_JSON_RETAIN_PARTS:false}
      metadata:
        key: ${PROCESSOR_METADATA_KEY:example}
        operator: ${PROCESSOR_METADATA_OPERATOR:set}
        value: ${PROCESSOR_METADATA_VALUE:${!hostname()}}
      metric:
        name: ${PROCESSOR_METRIC_NAME}
        path: ${PROCESSOR_METRIC_PATH}
        type: ${PROCESSOR_METRIC_TYPE:counter}
        value: ${PROCESSOR_METRIC_VALUE}
      number:
        operator: ${PROCESSOR_NUMBER_OPERATOR:add}
        value: ${PROCESSOR_NUMBER_VALUE:0}
      parallel:
        cap: ${PROCESSOR_PARALLEL_CAP:0}
      parse_log:
        allow_rfc3339: ${PROCESSOR_PARSE_LOG_ALLOW_RFC3339:true}
        best_effort: ${PROCESSOR_PARSE_LOG_BEST_EFFORT:true}
        codec: ${PROCESSOR_PARSE_LOG_CODEC:json}
        default_timezone: ${PROCESSOR_PARSE_LOG_DEFAULT_TIMEZONE:UTC}
        default_year: ${PROCESSOR_PARSE_LOG_DEFAULT_YEAR:current}
        format: ${PROCESSOR_PARSE_LOG_FORMAT:syslog_rfc5424}
      protobuf:
        import_path: ${PROCESSOR_PROTOBUF_IMPORT_PATH}
        message: ${PROCESSOR_PROTOBUF_MESSAGE}
        operator: ${PROCESSOR_PROTOBUF_OPERATOR:to_json}
      rate_limit:
        resource: ${PROCESSOR_RATE_LIMIT_RESOURCE}
      redis:
        key: ${PROCESSOR_REDIS_KEY}
        operator: ${PROCESSOR_REDIS_OPERATOR:scard}
        retries: ${PROCESSOR_REDIS_RETRIES:3}
        retry_period: ${PROCESSOR_REDIS_RETRY_PERIOD:500ms}
        url: ${PROCESSOR_REDIS_URL:tcp://localhost:6379}
      resource: ${PROCESSOR_RESOURCE}
      sample:
        retain: ${PROCESSOR_SAMPLE_RETAIN:10}
        seed: ${PROCESSOR_SAMPLE_SEED:0}
      select_parts:
        parts:
          - ${PROCESSOR_SELECT_PARTS_PARTS:0}
      sleep:
        duration: ${PROCESSOR_SLEEP_DURATION:100us}
      split:
        byte_size: ${PROCESSOR_SPLIT_BYTE_SIZE:0}
        size: ${PROCESSOR_SPLIT_SIZE:1}
      sql:
        data_source_name: ${PROCESSOR_SQL_DATA_SOURCE_NAME}
        driver: ${PROCESSOR_SQL_DRIVER:mysql}
        dsn: ${PROCESSOR_SQL_DSN}
        query: ${PROCESSOR_SQL_QUERY}
        result_codec: ${PROCESSOR_SQL_RESULT_CODEC:none}
      subprocess:
        max_buffer: ${PROCESSOR_SUBPROCESS_MAX_BUFFER:65536}
        name: ${PROCESSOR_SUBPROCESS_NAME:cat}
      text:
        arg: ${PROCESSOR_TEXT_ARG}
        operator: ${PROCESSOR_TEXT_OPERATOR:trim_space}
        value: ${PROCESSOR_TEXT_VALUE}
      throttle:
        period: ${PROCESSOR_THROTTLE_PERIOD:100us}
      type: ${PROCESSOR_TYPE:noop}
      unarchive:
        format: ${PROCESSOR_UNARCHIVE_FORMAT:binary}
      workflow:
        meta_path: ${PROCESSOR_WORKFLOW_META_PATH:meta.workflow}
      xml:
        operator: ${PROCESSOR_XML_OPERATOR:to_json}
  threads: ${PROCESSOR_THREADS:1}
output:
  broker:
    copies: ${OUTPUTS:1}
    outputs:
      - amqp:
          exchange: ${OUTPUT_AMQP_EXCHANGE:benthos-exchange}
          exchange_declare:
            durable: ${OUTPUT_AMQP_EXCHANGE_DECLARE_DURABLE:true}
            enabled: ${OUTPUT_AMQP_EXCHANGE_DECLARE_ENABLED:false}
            type: ${OUTPUT_AMQP_EXCHANGE_DECLARE_TYPE:direct}
          immediate: ${OUTPUT_AMQP_IMMEDIATE:false}
          key: ${OUTPUT_AMQP_KEY:benthos-key}
          mandatory: ${OUTPUT_AMQP_MANDATORY:false}
          max_in_flight: ${OUTPUT_AMQP_MAX_IN_FLIGHT:1}
          persistent: ${OUTPUT_AMQP_PERSISTENT:false}
          tls:
            enabled: ${OUTPUT_AMQP_TLS_ENABLED:false}
            root_cas_file: ${OUTPUT_AMQP_TLS_ROOT_CAS_FILE}
            skip_cert_verify: ${OUTPUT_AMQP_TLS_SKIP_CERT_VERIFY:false}
          type: ${OUTPUT_AMQP_TYPE}
          url: ${OUTPUT_AMQP_URL:amqp://guest:guest@localhost:5672/}
        amqp_0_9:
          exchange: ${OUTPUT_AMQP_0_9_EXCHANGE:benthos-exchange}
          exchange_declare:
            durable: ${OUTPUT_AMQP_0_9_EXCHANGE_DECLARE_DURABLE:true}
            enabled: ${OUTPUT_AMQP_0_9_EXCHANGE_DECLARE_ENABLED:false}
            type: ${OUTPUT_AMQP_0_9_EXCHANGE_DECLARE_TYPE:direct}
          immediate: ${OUTPUT_AMQP_0_9_IMMEDIATE:false}
          key: ${OUTPUT_AMQP_0_9_KEY:benthos-key}
          mandatory: ${OUTPUT_AMQP_0_9_MANDATORY:false}
          max_in_flight: ${OUTPUT_AMQP_0_9_MAX_IN_FLIGHT:1}
          persistent: ${OUTPUT_AMQP_0_9_PERSISTENT:false}
          tls:
            enabled: ${OUTPUT_AMQP_0_9_TLS_ENABLED:false}
            root_cas_file: ${OUTPUT_AMQP_0_9_TLS_ROOT_CAS_FILE}
            skip_cert_verify: ${OUTPUT_AMQP_0_9_TLS_SKIP_CERT_VERIFY:false}
          type: ${OUTPUT_AMQP_0_9_TYPE}
          url: ${OUTPUT_AMQP_0_9_URL:amqp://guest:guest@localhost:5672/}
        amqp_1:
          max_in_flight: ${OUTPUT_AMQP_1_MAX_IN_FLIGHT:1}
          sasl:
            mechanism: ${OUTPUT_AMQP_1_SASL_MECHANISM:none}
            password: ${OUTPUT_AMQP_1_SASL_PASSWORD}
            user: ${OUTPUT_AMQP_1_SASL_USER}
          target_address: ${OUTPUT_AMQP_1_TARGET_ADDRESS}
          tls:
            enabled: ${OUTPUT_AMQP_1_TLS_ENABLED:false}
            root_cas_file: ${OUTPUT_AMQP_1_TLS_ROOT_CAS_FILE}
            skip_cert_verify: ${OUTPUT_AMQP_1_TLS_SKIP_CERT_VERIFY:false}
          url: ${OUTPUT_AMQP_1_URL}
        blob_storage:
          blob_type: ${OUTPUT_BLOB_STORAGE_BLOB_TYPE:BLOCK}
          container: ${OUTPUT_BLOB_STORAGE_CONTAINER}
          max_in_flight: ${OUTPUT_BLOB_STORAGE_MAX_IN_FLIGHT:1}
          path: ${OUTPUT_BLOB_STORAGE_PATH:${!count("files")}-${!timestamp_unix_nano()}.txt}
          storage_access_key: ${OUTPUT_BLOB_STORAGE_STORAGE_ACCESS_KEY}
          storage_account: ${OUTPUT_BLOB_STORAGE_STORAGE_ACCOUNT}
          timeout: ${OUTPUT_BLOB_STORAGE_TIMEOUT:5s}
        cache:
          key: ${OUTPUT_CACHE_KEY:${!count("items")}-${!timestamp_unix_nano()}}
          max_in_flight: ${OUTPUT_CACHE_MAX_IN_FLIGHT:1}
          target: ${OUTPUT_CACHE_TARGET}
        dynamic:
          max_in_flight: ${OUTPUT_DYNAMIC_MAX_IN_FLIGHT:1}
          prefix: ${OUTPUT_DYNAMIC_PREFIX}
          timeout: ${OUTPUT_DYNAMIC_TIMEOUT:5s}
        elasticsearch:
          aws:
            credentials:
              id: ${OUTPUT_ELASTICSEARCH_AWS_CREDENTIALS_ID}
              profile: ${OUTPUT_ELASTICSEARCH_AWS_CREDENTIALS_PROFILE}
              role: ${OUTPUT_ELASTICSEARCH_AWS_CREDENTIALS_ROLE}
              role_external_id: ${OUTPUT_ELASTICSEARCH_AWS_CREDENTIALS_ROLE_EXTERNAL_ID}
              secret: ${OUTPUT_ELASTICSEARCH_AWS_CREDENTIALS_SECRET}
              token: ${OUTPUT_ELASTICSEARCH_AWS_CREDENTIALS_TOKEN}
            enabled: ${OUTPUT_ELASTICSEARCH_AWS_ENABLED:false}
            endpoint: ${OUTPUT_ELASTICSEARCH_AWS_ENDPOINT}
            region: ${OUTPUT_ELASTICSEARCH_AWS_REGION:eu-west-1}
          backoff:
            initial_interval: ${OUTPUT_ELASTICSEARCH_BACKOFF_INITIAL_INTERVAL:1s}
            max_elapsed_time: ${OUTPUT_ELASTICSEARCH_BACKOFF_MAX_ELAPSED_TIME:30s}
            max_interval: ${OUTPUT_ELASTICSEARCH_BACKOFF_MAX_INTERVAL:5s}
          basic_auth:
            enabled: ${OUTPUT_ELASTICSEARCH_BASIC_AUTH_ENABLED:false}
            password: ${OUTPUT_ELASTICSEARCH_BASIC_AUTH_PASSWORD}
            username: ${OUTPUT_ELASTICSEARCH_BASIC_AUTH_USERNAME}
          batching:
            byte_size: ${OUTPUT_ELASTICSEARCH_BATCHING_BYTE_SIZE:0}
            check: ${OUTPUT_ELASTICSEARCH_BATCHING_CHECK}
            count: ${OUTPUT_ELASTICSEARCH_BATCHING_COUNT:0}
            period: ${OUTPUT_ELASTICSEARCH_BATCHING_PERIOD}
          healthcheck: ${OUTPUT_ELASTICSEARCH_HEALTHCHECK:true}
          id: ${OUTPUT_ELASTICSEARCH_ID:${!count("elastic_ids")}-${!timestamp_unix()}}
          index: ${OUTPUT_ELASTICSEARCH_INDEX:benthos_index}
          max_in_flight: ${OUTPUT_ELASTICSEARCH_MAX_IN_FLIGHT:1}
          max_retries: ${OUTPUT_ELASTICSEARCH_MAX_RETRIES:0}
          pipeline: ${OUTPUT_ELASTICSEARCH_PIPELINE}
          sniff: ${OUTPUT_ELASTICSEARCH_SNIFF:true}
          timeout: ${OUTPUT_ELASTICSEARCH_TIMEOUT:5s}
          tls:
            enabled: ${OUTPUT_ELASTICSEARCH_TLS_ENABLED:false}
            root_cas_file: ${OUTPUT_ELASTICSEARCH_TLS_ROOT_CAS_FILE}
            skip_cert_verify: ${OUTPUT_ELASTICSEARCH_TLS_SKIP_CERT_VERIFY:false}
          type: ${OUTPUT_ELASTICSEARCH_TYPE:doc}
          urls:
            - ${OUTPUT_ELASTICSEARCH_URLS:http://localhost:9200}
        file:
          delimiter: ${OUTPUT_FILE_DELIMITER}
          path: ${OUTPUT_FILE_PATH}
        files:
          path: ${OUTPUT_FILES_PATH:${!count("files")}-${!timestamp_unix_nano()}.txt}
        gcp_pubsub:
          max_in_flight: ${OUTPUT_GCP_PUBSUB_MAX_IN_FLIGHT:1}
          project: ${OUTPUT_GCP_PUBSUB_PROJECT}
          topic: ${OUTPUT_GCP_PUBSUB_TOPIC}
        hdfs:
          directory: ${OUTPUT_HDFS_DIRECTORY}
          hosts:
            - ${OUTPUT_HDFS_HOSTS:localhost:9000}
          max_in_flight: ${OUTPUT_HDFS_MAX_IN_FLIGHT:1}
          path: ${OUTPUT_HDFS_PATH:${!count("files")}-${!timestamp_unix_nano()}.txt}
          user: ${OUTPUT_HDFS_USER:benthos_hdfs}
        http_client:
          backoff_on:
            - ${OUTPUT_HTTP_CLIENT_BACKOFF_ON:429}
          basic_auth:
            enabled: ${OUTPUT_HTTP_CLIENT_BASIC_AUTH_ENABLED:false}
            password: ${OUTPUT_HTTP_CLIENT_BASIC_AUTH_PASSWORD}
            username: ${OUTPUT_HTTP_CLIENT_BASIC_AUTH_USERNAME}
          batching:
            byte_size: ${OUTPUT_HTTP_CLIENT_BATCHING_BYTE_SIZE:0}
            check: ${OUTPUT_HTTP_CLIENT_BATCHING_CHECK}
            count: ${OUTPUT_HTTP_CLIENT_BATCHING_COUNT:0}
            period: ${OUTPUT_HTTP_CLIENT_BATCHING_PERIOD}
          copy_response_headers: ${OUTPUT_HTTP_CLIENT_COPY_RESPONSE_HEADERS:false}
          headers:
            Content-Type: ${OUTPUT_HTTP_CLIENT_HEADERS_CONTENT_TYPE:application/octet-stream}
          max_in_flight: ${OUTPUT_HTTP_CLIENT_MAX_IN_FLIGHT:1}
          max_retry_backoff: ${OUTPUT_HTTP_CLIENT_MAX_RETRY_BACKOFF:300s}
          oauth:
            access_token: ${OUTPUT_HTTP_CLIENT_OAUTH_ACCESS_TOKEN}
            access_token_secret: ${OUTPUT_HTTP_CLIENT_OAUTH_ACCESS_TOKEN_SECRET}
            consumer_key: ${OUTPUT_HTTP_CLIENT_OAUTH_CONSUMER_KEY}
            consumer_secret: ${OUTPUT_HTTP_CLIENT_OAUTH_CONSUMER_SECRET}
            enabled: ${OUTPUT_HTTP_CLIENT_OAUTH_ENABLED:false}
            request_url: ${OUTPUT_HTTP_CLIENT_OAUTH_REQUEST_URL}
          oauth2:
            client_key: ${OUTPUT_HTTP_CLIENT_OAUTH2_CLIENT_KEY}
            client_secret: ${OUTPUT_HTTP_CLIENT_OAUTH2_CLIENT_SECRET}
            enabled: ${OUTPUT_HTTP_CLIENT_OAUTH2_ENABLED:false}
            token_url: ${OUTPUT_HTTP_CLIENT_OAUTH2_TOKEN_URL}
          propagate_response: ${OUTPUT_HTTP_CLIENT_PROPAGATE_RESPONSE:false}
          proxy_url: ${OUTPUT_HTTP_CLIENT_PROXY_URL}
          rate_limit: ${OUTPUT_HTTP_CLIENT_RATE_LIMIT}
          retries: ${OUTPUT_HTTP_CLIENT_RETRIES:3}
          retry_period: ${OUTPUT_HTTP_CLIENT_RETRY_PERIOD:1s}
          timeout: ${OUTPUT_HTTP_CLIENT_TIMEOUT:5s}
          tls:
            enabled: ${OUTPUT_HTTP_CLIENT_TLS_ENABLED:false}
            root_cas_file: ${OUTPUT_HTTP_CLIENT_TLS_ROOT_CAS_FILE}
            skip_cert_verify: ${OUTPUT_HTTP_CLIENT_TLS_SKIP_CERT_VERIFY:false}
          url: ${OUTPUT_HTTP_CLIENT_URL:http://localhost:4195/post}
          verb: ${OUTPUT_HTTP_CLIENT_VERB:POST}
        http_server:
          address: ${OUTPUT_HTTP_SERVER_ADDRESS}
          cert_file: ${OUTPUT_HTTP_SERVER_CERT_FILE}
          key_file: ${OUTPUT_HTTP_SERVER_KEY_FILE}
          path: ${OUTPUT_HTTP_SERVER_PATH:/get}
          stream_path: ${OUTPUT_HTTP_SERVER_STREAM_PATH:/get/stream}
          timeout: ${OUTPUT_HTTP_SERVER_TIMEOUT:5s}
          ws_path: ${OUTPUT_HTTP_SERVER_WS_PATH:/get/ws}
        inproc: ${OUTPUT_INPROC}
        kafka:
          ack_replicas: ${OUTPUT_KAFKA_ACK_REPLICAS:false}
          addresses:
            - ${OUTPUT_KAFKA_ADDRESSES:localhost:9092}
          backoff:
            initial_interval: ${OUTPUT_KAFKA_BACKOFF_INITIAL_INTERVAL:3s}
            max_elapsed_time: ${OUTPUT_KAFKA_BACKOFF_MAX_ELAPSED_TIME:30s}
            max_interval: ${OUTPUT_KAFKA_BACKOFF_MAX_INTERVAL:10s}
          batching:
            byte_size: ${OUTPUT_KAFKA_BATCHING_BYTE_SIZE:0}
            check: ${OUTPUT_KAFKA_BATCHING_CHECK}
            count: ${OUTPUT_KAFKA_BATCHING_COUNT:0}
            period: ${OUTPUT_KAFKA_BATCHING_PERIOD}
          client_id: ${OUTPUT_KAFKA_CLIENT_ID:benthos_kafka_output}
          compression: ${OUTPUT_KAFKA_COMPRESSION:none}
          key: ${OUTPUT_KAFKA_KEY}
          max_in_flight: ${OUTPUT_KAFKA_MAX_IN_FLIGHT:1}
          max_msg_bytes: ${OUTPUT_KAFKA_MAX_MSG_BYTES:1000000}
          max_retries: ${OUTPUT_KAFKA_MAX_RETRIES:0}
          partitioner: ${OUTPUT_KAFKA_PARTITIONER:fnv1a_hash}
          round_robin_partitions: ${OUTPUT_KAFKA_ROUND_ROBIN_PARTITIONS:false}
          sasl:
            access_token: ${OUTPUT_KAFKA_SASL_ACCESS_TOKEN}
            enabled: ${OUTPUT_KAFKA_SASL_ENABLED:false}
            mechanism: ${OUTPUT_KAFKA_SASL_MECHANISM}
            password: ${OUTPUT_KAFKA_SASL_PASSWORD}
            token_cache: ${OUTPUT_KAFKA_SASL_TOKEN_CACHE}
            token_key: ${OUTPUT_KAFKA_SASL_TOKEN_KEY}
            user: ${OUTPUT_KAFKA_SASL_USER}
          target_version: ${OUTPUT_KAFKA_TARGET_VERSION:1.0.0}
          timeout: ${OUTPUT_KAFKA_TIMEOUT:5s}
          tls:
            enabled: ${OUTPUT_KAFKA_TLS_ENABLED:false}
            root_cas_file: ${OUTPUT_KAFKA_TLS_ROOT_CAS_FILE}
            skip_cert_verify: ${OUTPUT_KAFKA_TLS_SKIP_CERT_VERIFY:false}
          topic: ${OUTPUT_KAFKA_TOPIC:benthos_stream}
        kinesis:
          backoff:
            initial_interval: ${OUTPUT_KINESIS_BACKOFF_INITIAL_INTERVAL:1s}
            max_elapsed_time: ${OUTPUT_KINESIS_BACKOFF_MAX_ELAPSED_TIME:30s}
            max_interval: ${OUTPUT_KINESIS_BACKOFF_MAX_INTERVAL:5s}
          batching:
            byte_size: ${OUTPUT_KINESIS_BATCHING_BYTE_SIZE:0}
            check: ${OUTPUT_KINESIS_BATCHING_CHECK}
            count: ${OUTPUT_KINESIS_BATCHING_COUNT:0}
            period: ${OUTPUT_KINESIS_BATCHING_PERIOD}
          credentials:
            id: ${OUTPUT_KINESIS_CREDENTIALS_ID}
            profile: ${OUTPUT_KINESIS_CREDENTIALS_PROFILE}
            role: ${OUTPUT_KINESIS_CREDENTIALS_ROLE}
            role_external_id: ${OUTPUT_KINESIS_CREDENTIALS_ROLE_EXTERNAL_ID}
            secret: ${OUTPUT_KINESIS_CREDENTIALS_SECRET}
            token: ${OUTPUT_KINESIS_CREDENTIALS_TOKEN}
          endpoint: ${OUTPUT_KINESIS_ENDPOINT}
          hash_key: ${OUTPUT_KINESIS_HASH_KEY}
          max_in_flight: ${OUTPUT_KINESIS_MAX_IN_FLIGHT:1}
          max_retries: ${OUTPUT_KINESIS_MAX_RETRIES:0}
          partition_key: ${OUTPUT_KINESIS_PARTITION_KEY}
          region: ${OUTPUT_KINESIS_REGION:eu-west-1}
          stream: ${OUTPUT_KINESIS_STREAM}
        kinesis_firehose:
          backoff:
            initial_interval: ${OUTPUT_KINESIS_FIREHOSE_BACKOFF_INITIAL_INTERVAL:1s}
            max_elapsed_time: ${OUTPUT_KINESIS_FIREHOSE_BACKOFF_MAX_ELAPSED_TIME:30s}
            max_interval: ${OUTPUT_KINESIS_FIREHOSE_BACKOFF_MAX_INTERVAL:5s}
          batching:
            byte_size: ${OUTPUT_KINESIS_FIREHOSE_BATCHING_BYTE_SIZE:0}
            check: ${OUTPUT_KINESIS_FIREHOSE_BATCHING_CHECK}
            count: ${OUTPUT_KINESIS_FIREHOSE_BATCHING_COUNT:0}
            period: ${OUTPUT_KINESIS_FIREHOSE_BATCHING_PERIOD}
          credentials:
            id: ${OUTPUT_KINESIS_FIREHOSE_CREDENTIALS_ID}
            profile: ${OUTPUT_KINESIS_FIREHOSE_CREDENTIALS_PROFILE}
            role: ${OUTPUT_KINESIS_FIREHOSE_CREDENTIALS_ROLE}
            role_external_id: ${OUTPUT_KINESIS_FIREHOSE_CREDENTIALS_ROLE_EXTERNAL_ID}
            secret: ${OUTPUT_KINESIS_FIREHOSE_CREDENTIALS_SECRET}
            token: ${OUTPUT_KINESIS_FIREHOSE_CREDENTIALS_TOKEN}
          endpoint: ${OUTPUT_KINESIS_FIREHOSE_ENDPOINT}
          max_in_flight: ${OUTPUT_KINESIS_FIREHOSE_MAX_IN_FLIGHT:1}
          max_retries: ${OUTPUT_KINESIS_FIREHOSE_MAX_RETRIES:0}
          region: ${OUTPUT_KINESIS_FIREHOSE_REGION:eu-west-1}
          stream: ${OUTPUT_KINESIS_FIREHOSE_STREAM}
        mqtt:
          client_id: ${OUTPUT_MQTT_CLIENT_ID:benthos_output}
          max_in_flight: ${OUTPUT_MQTT_MAX_IN_FLIGHT:1}
          password: ${OUTPUT_MQTT_PASSWORD}
          qos: ${OUTPUT_MQTT_QOS:1}
          topic: ${OUTPUT_MQTT_TOPIC:benthos_topic}
          urls:
            - ${OUTPUT_MQTT_URLS:tcp://localhost:1883}
          user: ${OUTPUT_MQTT_USER}
        nanomsg:
          bind: ${OUTPUT_NANOMSG_BIND:false}
          max_in_flight: ${OUTPUT_NANOMSG_MAX_IN_FLIGHT:1}
          poll_timeout: ${OUTPUT_NANOMSG_POLL_TIMEOUT:5s}
          socket_type: ${OUTPUT_NANOMSG_SOCKET_TYPE:PUSH}
          urls:
            - ${OUTPUT_NANOMSG_URLS:tcp://localhost:5556}
        nats:
          max_in_flight: ${OUTPUT_NATS_MAX_IN_FLIGHT:1}
          subject: ${OUTPUT_NATS_SUBJECT:benthos_messages}
          urls:
            - ${OUTPUT_NATS_URLS:nats://127.0.0.1:4222}
        nats_stream:
          client_id: ${OUTPUT_NATS_STREAM_CLIENT_ID:benthos_client}
          cluster_id: ${OUTPUT_NATS_STREAM_CLUSTER_ID:test-cluster}
          max_in_flight: ${OUTPUT_NATS_STREAM_MAX_IN_FLIGHT:1}
          subject: ${OUTPUT_NATS_STREAM_SUBJECT:benthos_messages}
          urls:
            - ${OUTPUT_NATS_STREAM_URLS:nats://127.0.0.1:4222}
        nsq:
          max_in_flight: ${OUTPUT_NSQ_MAX_IN_FLIGHT:1}
          nsqd_tcp_address: ${OUTPUT_NSQ_NSQD_TCP_ADDRESS:localhost:4150}
          tls:
            enabled: ${OUTPUT_NSQ_TLS_ENABLED:false}
            root_cas_file: ${OUTPUT_NSQ_TLS_ROOT_CAS_FILE}
            skip_cert_verify: ${OUTPUT_NSQ_TLS_SKIP_CERT_VERIFY:false}
          topic: ${OUTPUT_NSQ_TOPIC:benthos_messages}
          user_agent: ${OUTPUT_NSQ_USER_AGENT:benthos_producer}
        redis_hash:
          key: ${OUTPUT_REDIS_HASH_KEY}
          max_in_flight: ${OUTPUT_REDIS_HASH_MAX_IN_FLIGHT:1}
          url: ${OUTPUT_REDIS_HASH_URL:tcp://localhost:6379}
          walk_json_object: ${OUTPUT_REDIS_HASH_WALK_JSON_OBJECT:false}
          walk_metadata: ${OUTPUT_REDIS_HASH_WALK_METADATA:false}
        redis_list:
          key: ${OUTPUT_REDIS_LIST_KEY:benthos_list}
          max_in_flight: ${OUTPUT_REDIS_LIST_MAX_IN_FLIGHT:1}
          url: ${OUTPUT_REDIS_LIST_URL:tcp://localhost:6379}
        redis_pubsub:
          channel: ${OUTPUT_REDIS_PUBSUB_CHANNEL:benthos_chan}
          max_in_flight: ${OUTPUT_REDIS_PUBSUB_MAX_IN_FLIGHT:1}
          url: ${OUTPUT_REDIS_PUBSUB_URL:tcp://localhost:6379}
        redis_streams:
          body_key: ${OUTPUT_REDIS_STREAMS_BODY_KEY:body}
          max_in_flight: ${OUTPUT_REDIS_STREAMS_MAX_IN_FLIGHT:1}
          max_length: ${OUTPUT_REDIS_STREAMS_MAX_LENGTH:0}
          stream: ${OUTPUT_REDIS_STREAMS_STREAM:benthos_stream}
          url: ${OUTPUT_REDIS_STREAMS_URL:tcp://localhost:6379}
        resource: ${OUTPUT_RESOURCE}
        s3:
          batching:
            byte_size: ${OUTPUT_S3_BATCHING_BYTE_SIZE:0}
            check: ${OUTPUT_S3_BATCHING_CHECK}
            count: ${OUTPUT_S3_BATCHING_COUNT:0}
            period: ${OUTPUT_S3_BATCHING_PERIOD}
          bucket: ${OUTPUT_S3_BUCKET}
          content_encoding: ${OUTPUT_S3_CONTENT_ENCODING}
          content_type: ${OUTPUT_S3_CONTENT_TYPE:application/octet-stream}
          credentials:
            id: ${OUTPUT_S3_CREDENTIALS_ID}
            profile: ${OUTPUT_S3_CREDENTIALS_PROFILE}
            role: ${OUTPUT_S3_CREDENTIALS_ROLE}
            role_external_id: ${OUTPUT_S3_CREDENTIALS_ROLE_EXTERNAL_ID}
            secret: ${OUTPUT_S3_CREDENTIALS_SECRET}
            token: ${OUTPUT_S3_CREDENTIALS_TOKEN}
          endpoint: ${OUTPUT_S3_ENDPOINT}
          force_path_style_urls: ${OUTPUT_S3_FORCE_PATH_STYLE_URLS:false}
          kms_key_id: ${OUTPUT_S3_KMS_KEY_ID}
          max_in_flight: ${OUTPUT_S3_MAX_IN_FLIGHT:1}
          path: ${OUTPUT_S3_PATH:${!count("files")}-${!timestamp_unix_nano()}.txt}
          region: ${OUTPUT_S3_REGION:eu-west-1}
          storage_class: ${OUTPUT_S3_STORAGE_CLASS:STANDARD}
          timeout: ${OUTPUT_S3_TIMEOUT:5s}
        sns:
          credentials:
            id: ${OUTPUT_SNS_CREDENTIALS_ID}
            profile: ${OUTPUT_SNS_CREDENTIALS_PROFILE}
            role: ${OUTPUT_SNS_CREDENTIALS_ROLE}
            role_external_id: ${OUTPUT_SNS_CREDENTIALS_ROLE_EXTERNAL_ID}
            secret: ${OUTPUT_SNS_CREDENTIALS_SECRET}
            token: ${OUTPUT_SNS_CREDENTIALS_TOKEN}
          endpoint: ${OUTPUT_SNS_ENDPOINT}
          max_in_flight: ${OUTPUT_SNS_MAX_IN_FLIGHT:1}
          region: ${OUTPUT_SNS_REGION:eu-west-1}
          timeout: ${OUTPUT_SNS_TIMEOUT:5s}
          topic_arn: ${OUTPUT_SNS_TOPIC_ARN}
        socket:
          address: ${OUTPUT_SOCKET_ADDRESS:/tmp/benthos.sock}
          network: ${OUTPUT_SOCKET_NETWORK:unix}
        sqs:
          backoff:
            initial_interval: ${OUTPUT_SQS_BACKOFF_INITIAL_INTERVAL:1s}
            max_elapsed_time: ${OUTPUT_SQS_BACKOFF_MAX_ELAPSED_TIME:30s}
            max_interval: ${OUTPUT_SQS_BACKOFF_MAX_INTERVAL:5s}
          batching:
            byte_size: ${OUTPUT_SQS_BATCHING_BYTE_SIZE:0}
            check: ${OUTPUT_SQS_BATCHING_CHECK}
            count: ${OUTPUT_SQS_BATCHING_COUNT:0}
            period: ${OUTPUT_SQS_BATCHING_PERIOD}
          credentials:
            id: ${OUTPUT_SQS_CREDENTIALS_ID}
            profile: ${OUTPUT_SQS_CREDENTIALS_PROFILE}
            role: ${OUTPUT_SQS_CREDENTIALS_ROLE}
            role_external_id: ${OUTPUT_SQS_CREDENTIALS_ROLE_EXTERNAL_ID}
            secret: ${OUTPUT_SQS_CREDENTIALS_SECRET}
            token: ${OUTPUT_SQS_CREDENTIALS_TOKEN}
          endpoint: ${OUTPUT_SQS_ENDPOINT}
          max_in_flight: ${OUTPUT_SQS_MAX_IN_FLIGHT:1}
          max_retries: ${OUTPUT_SQS_MAX_RETRIES:0}
          message_deduplication_id: ${OUTPUT_SQS_MESSAGE_DEDUPLICATION_ID}
          message_group_id: ${OUTPUT_SQS_MESSAGE_GROUP_ID}
          region: ${OUTPUT_SQS_REGION:eu-west-1}
          url: ${OUTPUT_SQS_URL}
        stdout:
          delimiter: ${OUTPUT_STDOUT_DELIMITER}
        table_storage:
          batching:
            byte_size: ${OUTPUT_TABLE_STORAGE_BATCHING_BYTE_SIZE:0}
            check: ${OUTPUT_TABLE_STORAGE_BATCHING_CHECK}
            count: ${OUTPUT_TABLE_STORAGE_BATCHING_COUNT:0}
            period: ${OUTPUT_TABLE_STORAGE_BATCHING_PERIOD}
          insert_type: ${OUTPUT_TABLE_STORAGE_INSERT_TYPE:INSERT}
          max_in_flight: ${OUTPUT_TABLE_STORAGE_MAX_IN_FLIGHT:1}
          partition_key: ${OUTPUT_TABLE_STORAGE_PARTITION_KEY}
          row_key: ${OUTPUT_TABLE_STORAGE_ROW_KEY}
          storage_access_key: ${OUTPUT_TABLE_STORAGE_STORAGE_ACCESS_KEY}
          storage_account: ${OUTPUT_TABLE_STORAGE_STORAGE_ACCOUNT}
          table_name: ${OUTPUT_TABLE_STORAGE_TABLE_NAME}
          timeout: ${OUTPUT_TABLE_STORAGE_TIMEOUT:5s}
        tcp:
          address: ${OUTPUT_TCP_ADDRESS:localhost:4194}
        type: ${OUTPUT_TYPE:dynamic}
        udp:
          address: ${OUTPUT_UDP_ADDRESS:localhost:4194}
        websocket:
          basic_auth:
            enabled: ${OUTPUT_WEBSOCKET_BASIC_AUTH_ENABLED:false}
            password: ${OUTPUT_WEBSOCKET_BASIC_AUTH_PASSWORD}
            username: ${OUTPUT_WEBSOCKET_BASIC_AUTH_USERNAME}
          oauth:
            access_token: ${OUTPUT_WEBSOCKET_OAUTH_ACCESS_TOKEN}
            access_token_secret: ${OUTPUT_WEBSOCKET_OAUTH_ACCESS_TOKEN_SECRET}
            consumer_key: ${OUTPUT_WEBSOCKET_OAUTH_CONSUMER_KEY}
            consumer_secret: ${OUTPUT_WEBSOCKET_OAUTH_CONSUMER_SECRET}
            enabled: ${OUTPUT_WEBSOCKET_OAUTH_ENABLED:false}
            request_url: ${OUTPUT_WEBSOCKET_OAUTH_REQUEST_URL}
          url: ${OUTPUT_WEBSOCKET_URL:ws://localhost:4195/post/ws}
        zmq4:
          bind: ${OUTPUT_ZMQ4_BIND:true}
          high_water_mark: ${OUTPUT_ZMQ4_HIGH_WATER_MARK:0}
          poll_timeout: ${OUTPUT_ZMQ4_POLL_TIMEOUT:5s}
          socket_type: ${OUTPUT_ZMQ4_SOCKET_TYPE:PUSH}
          urls:
            - ${OUTPUT_ZMQ4_URLS:tcp://*:5556}
    pattern: ${OUTPUTS_PATTERN:greedy}
  type: broker
logger:
  add_timestamp: ${LOGGER_ADD_TIMESTAMP:true}
  json_format: ${LOGGER_JSON_FORMAT:true}
  level: ${LOGGER_LEVEL:INFO}
  prefix: ${LOGGER_PREFIX:benthos}
metrics:
  cloudwatch:
    credentials:
      id: ${METRICS_CLOUDWATCH_CREDENTIALS_ID}
      profile: ${METRICS_CLOUDWATCH_CREDENTIALS_PROFILE}
      role: ${METRICS_CLOUDWATCH_CREDENTIALS_ROLE}
      role_external_id: ${METRICS_CLOUDWATCH_CREDENTIALS_ROLE_EXTERNAL_ID}
      secret: ${METRICS_CLOUDWATCH_CREDENTIALS_SECRET}
      token: ${METRICS_CLOUDWATCH_CREDENTIALS_TOKEN}
    endpoint: ${METRICS_CLOUDWATCH_ENDPOINT}
    flush_period: ${METRICS_CLOUDWATCH_FLUSH_PERIOD:100ms}
    namespace: ${METRICS_CLOUDWATCH_NAMESPACE:Benthos}
    path_mapping: ${METRICS_CLOUDWATCH_PATH_MAPPING}
    region: ${METRICS_CLOUDWATCH_REGION:eu-west-1}
  http_server:
    path_mapping: ${METRICS_HTTP_SERVER_PATH_MAPPING}
    prefix: ${METRICS_HTTP_SERVER_PREFIX:benthos}
  prometheus:
    path_mapping: ${METRICS_PROMETHEUS_PATH_MAPPING}
    prefix: ${METRICS_PROMETHEUS_PREFIX:benthos}
    push_interval: ${METRICS_PROMETHEUS_PUSH_INTERVAL}
    push_job_name: ${METRICS_PROMETHEUS_PUSH_JOB_NAME:benthos_push}
    push_url: ${METRICS_PROMETHEUS_PUSH_URL}
  statsd:
    address: ${METRICS_STATSD_ADDRESS:localhost:4040}
    flush_period: ${METRICS_STATSD_FLUSH_PERIOD:100ms}
    network: ${METRICS_STATSD_NETWORK:udp}
    path_mapping: ${METRICS_STATSD_PATH_MAPPING}
    prefix: ${METRICS_STATSD_PREFIX:benthos}
    tag_format: ${METRICS_STATSD_TAG_FORMAT:legacy}
  stdout:
    flush_metrics: ${METRICS_STDOUT_FLUSH_METRICS:false}
    path_mapping: ${METRICS_STDOUT_PATH_MAPPING}
    push_interval: ${METRICS_STDOUT_PUSH_INTERVAL}
    static_fields:
      '@service': ${METRICS_STDOUT_STATIC_FIELDS_@SERVICE:benthos}
  type: ${METRICS_TYPE:http_server}
